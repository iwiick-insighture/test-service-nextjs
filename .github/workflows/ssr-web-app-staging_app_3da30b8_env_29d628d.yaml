name: ssr-web-app-staging_app_3da30b8_env_29d628d Pipeline (Skyu Generated)
'on':
  push:
    branches:
      - staging
      - release/*
    tags:
      - v*
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_b7566636-311d-4ec7-b13d-1834b06d6042
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.TESTSERVICENEXTJS_SSRWEBAPPSTAGING_APP_3DA30B8_ENV_29D628D}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  DEPLOY_STEP_SHOULD_DEPLOY: 'false'
jobs:
  code-scan:
    name: Code Scan
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: 'Run :: Checkout repository for Code Scan'
        uses: actions/checkout@v4
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Install Semgrep, Scan and Print'
        run: >-
          docker run -i -v "${PWD}:/src" semgrep/semgrep semgrep /src --json
          --quiet > semgrep_results.json
      - name: 'Run :: Upload Code Scan Report'
        run: |2-

                  SARIF_FILE="semgrep_results.json"
                  if [ -n "$SARIF_FILE" ]; then
                    cat "$SARIF_FILE" > ${{ env.COMMIT_ID }}-code-scan-report.sarif
                    echo "Uploading CodeQL Results to S3 :: ${{ env.COMMIT_ID }}-code-scan-report.sarif"
           
                    response=$(curl -X POST -F 'file=@${{ env.COMMIT_ID }}-code-scan-report.sarif' -F 'provider=aws' -F 'resourceType=code-scan-report' -F 'cloudStoragePath=/${{ env.PIPELINE_APPLICATION_ID }}/code-scan-reports/'  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-auth-by: sa' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'Content-Type: multipart/form-data'  '${{ env.S3_UPLOAD_ENDPOINT }}')

                    if echo "$response" | grep -q '"success":true'; then
                      echo "SUCCESS :: $response"
                    else
                      echo "FAILED :: $response"
                    fi

                  else
                      echo "SARIF file not found."
                  fi
  _status-pending:
    name: _status Pending
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Started
        run: |2-

              context=$(echo '${{ env.CONTEXT_JSON }}' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}')
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  _release-info:
    name: _release Info
    permissions: write-all
    runs-on: ubuntu-latest
    if: ${{ github.event.client_payload.releaseData }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Release
        run: |2-

              echo "Pipeline Release Information"
              echo "////////////////////////////"
              echo "releaseId         : ${{ github.event.client_payload.releaseData.releaseId }}"
              echo "pipelineId        : ${{ github.event.client_payload.releaseData.pipelineId }}"
              echo "pipelineRunId     : ${{ github.run_id }}"
              echo "applicationId     : ${{ github.event.client_payload.releaseData.appId }}"
              echo "versionId         : ${{ env.DEPLOYMENT_APP_VERSION_ID }}"
              echo "credentialId      : ${{ env.PIPELINE_CREDENTIAL_ID }}"
              echo "userName          : ${{ github.repository_owner }}"
              echo "repositoryName    : ${{ github.repository }}"
              echo "commitId          : ${{ env.COMMIT_ID }}"
              echo "commitHash        : ${{ env.COMMIT_ID }}"
              echo "commitAvatar      : https://github.com/${{ github.event.head_commit.author.name }}.png"
              echo "commitTime        : ${{ github.event.head_commit.timestamp }}"
              echo "commitMessage     : ${{ github.event.client_payload.commitMessage }}"
              echo "commitUser        : ${{ github.event.head_commit.author.name }}"
              echo "shouldDeploy      : ${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}"
              echo "containerName     : ${{ env.DEPLOYMENT_CONTAINER_NAME }}"
              echo "imageRegistryURL  : ${{ env.IMAGE_NAME }}",
              # Storing Release Information for Deployment
              response=$(curl -X POST -d "releaseId=${{ github.event.client_payload.releaseData.releaseId }}&pipelineId=${{ github.event.client_payload.releaseData.pipelineId }}&pipelineRunId=${{ github.run_id }}&versionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&applicationId=${{ github.event.client_payload.releaseData.appId }}&credentialId=${{ env.PIPELINE_CREDENTIAL_ID }}&userName=${{ github.repository_owner }}&repositoryName=${{ github.repository }}&commitId=${{ env.COMMIT_ID }}&commitData[commitHash]=${{ env.COMMIT_ID }}&commitData[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitData[commitTime]=${{ github.event.head_commit.timestamp }}&commitData[commitMessage]=${{ github.event.client_payload.commitMessage }}&commitData[commitUser]=${{ github.event.head_commit.author.name }}&shouldDeploy=${{ env.DEPLOY_STEP_SHOULD_DEPLOY }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&imageRegistryURL=${{ env.IMAGE_NAME }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.PIPELINE_SERVICE_EP }}/release/pipeline')
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
  build-ssr-web-app:
    name: Build Ssr Web App
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - _status-pending
    steps:
      - name: Start
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: |2-

              git fetch --all
              git checkout ${{ github.event.client_payload.commitId }} || true
              
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.roleARN }}
          role-session-name: skyu-pipeline-assume-role-session
          aws-region: ${{ env.region }}
      - name: 'Run :: Initialize AWS Amplify'
        id: initialize-amplify
        run: |2-

              echo "Fetching Amplify Apps"
              app_list=$(aws amplify list-apps --no-paginate --region ${{ env.region }})
              app_id=$(echo "$app_list" | jq -r '.apps[] | select(.name == "${{ env.APPLICATION_NAME }}")' | jq -r .appId)

              build_spec='{
                "version": 1,
                "frontend": {
                  "phases": {
                    "preBuild": {
                      "commands": [
                        "${{ env.APP_INSTALL_DEPS_PRE_COMMAND }}",
                        "${{ env.APP_INSTALL_DEPS_COMMAND }}"
                      ]
                    },
                    "build": {
                      "commands": [
                        "${{ env.APP_BUILD_COMMAND }}"
                      ]
                    }
                  },
                  "artifacts": {
                    "baseDirectory": "${{ env.APP_BUILD_FOLDER }}",
                    "files": [
                      "**/*"
                    ]
                  }
                }
              }'

              if [ -n "$app_id" ]; then
                echo "Amplify App already exists. Updating..."

                production_branch=$(echo "$app_list" | jq -r '.apps[] | select(.name == "${{ env.APPLICATION_NAME }}")' | jq -r .productionBranch.branchName)
                echo "Production Branch: $production_branch"
                echo "productionBranch=$production_branch" >> $GITHUB_OUTPUT

                aws amplify update-app         --app-id "$app_id"         --environment-variables "Branch=${{ github.ref }},Commit=${{ github.sha }}${{ env.AMPLIFY_ENV_VARS }}"         --iam-service-role-arn "${{ env.roleARN }}"         --build-spec "$build_spec" 
              else
                echo "Initializing new Amplify App"
                formattedRepoUrl=$(echo "${{ github.repositoryUrl }}" | sed 's|git://|https://|') 
                echo "Formatted Repository URL: $formattedRepoUrl"
                create_app=$(
                  aws amplify create-app         --name ${{ env.APPLICATION_NAME }}         --platform WEB_COMPUTE         --repository $formattedRepoUrl         --environment-variables "Branch=${{ github.ref }},Commit=${{ github.sha }}${{ env.AMPLIFY_ENV_VARS }}"         --access-token ${{ env.pat }}         --region ${{ env.region }}         --iam-service-role-arn ${{ env.roleARN }}         --build-spec "$build_spec"       )
                app_id=$(echo $create_app | jq -r '.app.appId')
              fi
              
              echo "App ID: $app_id"
              echo "appId=$app_id" >> $GITHUB_OUTPUT
              
      - name: 'Run :: Publish to AWS Amplify'
        run: |2-

              appId=${{ steps.initialize-amplify.outputs.appId }}
              productionBranch=${{ steps.initialize-amplify.outputs.productionBranch }}

              if [ -z "$productionBranch" ] && [ "$productionBranch" != "${{ github.ref_name }}" ]; then 
                echo "Production Branch has Changed"
                echo "Deleting Previous Production Branch"
                aws amplify delete-branch --app-id $appId --branch-name $productionBranch
              else
                echo "Production Branch Remains the Same"
              fi

              echo "Creating Deployment branch"
              aws amplify create-branch --stage PRODUCTION --app-id $appId --branch-name ${{ github.ref_name }} || true

              echo "Checking for pending job on branch ${{ github.ref_name }}"
              while true; do
                jobs=$(aws amplify list-jobs --app-id $appId --branch-name "${{ github.ref_name }}" --output "json" --no-paginate)
                pending_jobs=$(echo $jobs | jq '.jobSummaries | map(select(.status | IN("FAILED", "SUCCEED", "CANCELLED") | not))') 
                pending_job_count=$(echo $pending_jobs | jq 'length')
                echo "Pending Jobs: $pending_job_count"

                if [ "$pending_job_count" -gt 0 ]; then
                    echo "$pending_job_count Pending Job(s) found on branch ${{ github.ref_name }}. Waiting..."
                    sleep 10  
                else
                  echo "All Pending Jobs done... Proceeding"
                  break
                fi
              done

              echo "Starting Amplify Job"
              aws amplify start-job --app-id $appId --branch-name ${{ github.ref_name }} --job-type RELEASE
              
  _status-success:
    name: _status Success
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - code-scan
      - build-ssr-web-app
      - deploy
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Success
        run: |2-

              context=$(echo '${{ env.CONTEXT_JSON }}' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}')
              
  _status-failed:
    name: _status Failed
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
    needs:
      - code-scan
      - build-ssr-web-app
      - deploy
    if: ${{ failure() || cancelled() }}
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Pipeline Failed
        run: |2-

              context=$(echo '${{ env.CONTEXT_JSON }}' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=${{ github.run_id }}&context=$context"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}')
              
  deploy:
    name: Deploy
    permissions: write-all
    runs-on: ubuntu-latest
    needs:
      - build-ssr-web-app
    if: github.event.client_payload.releaseData == null
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-
              
              response=$(curl -X PATCH -d "imageRegistryURL=${{ env.IMAGE_NAME }}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.COMMIT_ID }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=${{ github.event.head_commit.message || github.event.client_payload.commitMessage }}&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-resource-id: ${{ env.PIPELINE_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  '${{ env.DEPLOYMENT_ENDPOINT }}')
              
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
